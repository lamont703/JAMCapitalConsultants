# Disabled - using Azure CLI direct deployment instead
# on:
#   push:
#     branches: [main, master, production]
#   pull_request:
#     branches: [main, master]
#   workflow_dispatch:

on:
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: jam-capital-backend
  AZURE_WEBAPP_PACKAGE_PATH: "./Backend"
  NODE_VERSION: "22.x"
  # Using your existing Azure resources
  AZURE_RESOURCE_GROUP: JAM_resource_group
  AZURE_COSMOS_ACCOUNT: jamdb
  AZURE_STORAGE_ACCOUNT: jamblobstorage

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 📁 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          npm ci

      - name: 🧪 Run tests
        run: |
          cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          npm test
        continue-on-error: true

      - name: 🔍 Run security audit
        run: |
          cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          npm audit --audit-level moderate
        continue-on-error: true

      - name: 🏗️ Build application
        run: |
          cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          npm run build --if-present

      - name: 🗜️ Create deployment package
        run: |
          cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          # Remove dev dependencies and unnecessary files
          rm -rf node_modules/.cache
          rm -rf .nyc_output
          rm -rf coverage
          # Create zip package
          zip -r ../deployment-package.zip . -x "*.git*" "*.env*" "test/*" "*.test.js" "*.spec.js"

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: deployment-package.zip

  deploy-staging:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    environment: staging

    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: 🔓 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🚀 Deploy to Azure Web App (Staging)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: "staging"
          package: deployment-package.zip

      - name: ⚙️ Configure App Settings (Staging)
        uses: azure/CLI@v1
        with:
          azcliversion: 2.50.0
          inlinescript: |
            # Configure staging environment variables using your existing resources
            az webapp config appsettings set \
              --name ${{ env.AZURE_WEBAPP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --slot staging \
              --settings \
                NODE_ENV=staging \
                PORT=8080 \
                COSMOS_DB_CONNECTION_STRING="${{ secrets.COSMOS_DB_CONNECTION_STRING }}" \
                COSMOS_DB_DATABASE_NAME="jamdb" \
                COSMOS_DB_CONTAINER_NAME="jamdbcontainer" \
                AZURE_STORAGE_CONNECTION_STRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
                AZURE_STORAGE_CONTAINER_NAME="jamblobstorage" \
                APPLICATIONINSIGHTS_CONNECTION_STRING="${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}" \
                OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
                JWT_SECRET="${{ secrets.JWT_SECRET }}" \
                WEBSITE_NODE_DEFAULT_VERSION="~22" \
                SCM_DO_BUILD_DURING_DEPLOYMENT=true

      - name: 🧪 Staging Health Check
        run: |
          echo "Waiting for staging deployment to be ready..."
          sleep 30

          # Health check
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net/health || echo "000")

          if [ "$response" = "200" ]; then
            echo "✅ Staging deployment successful - Health check passed"
          else
            echo "❌ Staging deployment failed - Health check returned: $response"
            exit 1
          fi

  deploy-master:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: 🔓 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🚀 Deploy to Azure Web App (Production)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: deployment-package.zip

      - name: ⚙️ Configure App Settings (Production)
        uses: azure/CLI@v1
        with:
          azcliversion: 2.50.0
          inlinescript: |
            # Configure production environment variables using your existing resources
            az webapp config appsettings set \
              --name ${{ env.AZURE_WEBAPP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --settings \
                NODE_ENV=production \
                PORT=8080 \
                COSMOS_DB_CONNECTION_STRING="${{ secrets.COSMOS_DB_CONNECTION_STRING }}" \
                COSMOS_DB_DATABASE_NAME="jamdb" \
                COSMOS_DB_CONTAINER_NAME="jamdbcontainer" \
                AZURE_STORAGE_CONNECTION_STRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
                AZURE_STORAGE_CONTAINER_NAME="jamblobstorage" \
                APPLICATIONINSIGHTS_CONNECTION_STRING="${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}" \
                OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
                JWT_SECRET="${{ secrets.JWT_SECRET }}" \
                WEBSITE_NODE_DEFAULT_VERSION="~22" \
                SCM_DO_BUILD_DURING_DEPLOYMENT=true

      - name: 🏥 Production Health Check
        run: |
          echo "Waiting for production deployment to be ready..."
          sleep 30

          # Health check
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health || echo "000")

          if [ "$response" = "200" ]; then
            echo "✅ Production deployment successful - Health check passed"
          else
            echo "❌ Production deployment failed - Health check returned: $response"
            exit 1
          fi

      - name: 🔥 Warm up application
        run: |
          echo "Warming up production application..."
          curl -s https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health > /dev/null
          curl -s https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/status > /dev/null
          echo "✅ Application warmed up"

  deploy-production:
    if: github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: 🔓 Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🚀 Deploy to Azure Web App (Production)
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: deployment-package.zip

      - name: ⚙️ Configure App Settings (Production)
        uses: azure/CLI@v1
        with:
          azcliversion: 2.50.0
          inlinescript: |
            # Configure production environment variables using your existing resources
            az webapp config appsettings set \
              --name ${{ env.AZURE_WEBAPP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --settings \
                NODE_ENV=production \
                PORT=8080 \
                COSMOS_DB_CONNECTION_STRING="${{ secrets.COSMOS_DB_CONNECTION_STRING }}" \
                COSMOS_DB_DATABASE_NAME="jamdb" \
                COSMOS_DB_CONTAINER_NAME="jamdbcontainer" \
                AZURE_STORAGE_CONNECTION_STRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
                AZURE_STORAGE_CONTAINER_NAME="jamblobstorage" \
                APPLICATIONINSIGHTS_CONNECTION_STRING="${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}" \
                OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
                JWT_SECRET="${{ secrets.JWT_SECRET }}" \
                WEBSITE_NODE_DEFAULT_VERSION="~22" \
                SCM_DO_BUILD_DURING_DEPLOYMENT=true

      - name: 🏥 Production Health Check
        run: |
          echo "Waiting for production deployment to be ready..."
          sleep 30

          # Health check
          response=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health || echo "000")

          if [ "$response" = "200" ]; then
            echo "✅ Production deployment successful - Health check passed"
          else
            echo "❌ Production deployment failed - Health check returned: $response"
            exit 1
          fi

      - name: 🔥 Warm up application
        run: |
          echo "Warming up production application..."
          curl -s https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health > /dev/null
          curl -s https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/status > /dev/null
          echo "✅ Application warmed up"

  notify:
    if: always()
    runs-on: ubuntu-latest
    needs: [build, deploy-staging, deploy-master, deploy-production]

    steps:
      - name: 📊 Deployment Summary
        run: |
          echo "## 🚀 JAM Capital Backend Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Build Status:** ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "**Staging Deploy:** ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
            echo "**Staging URL:** https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "**Production Deploy:** ${{ needs.deploy-master.result }}" >> $GITHUB_STEP_SUMMARY
            echo "**Production URL:** https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ github.ref }}" = "refs/heads/production" ]; then
            echo "**Production Deploy:** ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
            echo "**Production URL:** https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏗️ Azure Resources Used:" >> $GITHUB_STEP_SUMMARY
          echo "- **Resource Group:** ${{ env.AZURE_RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cosmos DB:** ${{ env.AZURE_COSMOS_ACCOUNT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Storage Account:** ${{ env.AZURE_STORAGE_ACCOUNT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Web App:** ${{ env.AZURE_WEBAPP_NAME }}" >> $GITHUB_STEP_SUMMARY
